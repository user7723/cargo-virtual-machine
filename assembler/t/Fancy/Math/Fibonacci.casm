module Fancy.Math.Fibonacci

import Fancy.Math.Factorial
import Main

section bss

section data

section text

fibonacci
{
  decl n

  l:n
  read             // n
  0                // n
  icmp
  jeq exit0        // n
  1                // n 1
  icmp             // n`cmp`1
  jeq exit1        //
  l:n
  read             // n
  1                // n-1
  isub
  call t:fibonacci // f(n-1)
  l:n
  read             // f(n-1) n
  2
  isub             // f(n-1) (n-1)
  call t:fibonacci // f(n-1) f(n-2)
  iadd             // f(n-1) + f(n-2)

.exit1:
  1
.exit0:
  ret
}

/*
Module
  { moduleName = [ "Fancy" , "Math" , "Fibonacci" ]
  , entryPoint = Nothing
  , programGraph =
      fromList
        [ ( QLabel
              { labelQualifier = [ "Fancy" , "Math" , "Fibonacci" ]
              , labelSection = Text
              , labelName = "fibonacci"
              , labelRelative = Nothing
              }
          , Node
              (TextCode
                 FunctionDef
                   { functionName =
                       QLabel
                         { labelQualifier = [ "Fancy" , "Math" , "Fibonacci" ]
                         , labelSection = Text
                         , labelName = "fibonacci"
                         , labelRelative = Nothing
                         }
                   , functionScope = fromList [ ( "n" , 0 ) ]
                   , functionInsts =
                       fromList
                         [ ( 0 , Nullary Decl )
                         , ( 1 , Unary Push (OperandAddress (Numeric Local 0)) )
                         , ( 2 , Nullary Read )
                         , ( 3 , Unary Push (OperandNumber 0) )
                         , ( 4 , Nullary Icmp )
                         , ( 5
                           , Unary
                               Jeq
                               (OperandAddress
                                  (Symbolic
                                     QLabel
                                       { labelQualifier = [ "Fancy" , "Math" , "Fibonacci" ]
                                       , labelSection = Text
                                       , labelName = "fibonacci"
                                       , labelRelative = Just "exit0"
                                       }))
                           )
                         , ( 6 , Unary Push (OperandNumber 1) )
                         , ( 7 , Nullary Icmp )
                         , ( 8
                           , Unary
                               Jeq
                               (OperandAddress
                                  (Symbolic
                                     QLabel
                                       { labelQualifier = [ "Fancy" , "Math" , "Fibonacci" ]
                                       , labelSection = Text
                                       , labelName = "fibonacci"
                                       , labelRelative = Just "exit1"
                                       }))
                           )
                         , ( 9 , Unary Push (OperandAddress (Numeric Local 0)) )
                         , ( 10 , Nullary Read )
                         , ( 11 , Unary Push (OperandNumber 1) )
                         , ( 12 , Nullary Isub )
                         , ( 13
                           , Unary
                               Call
                               (OperandAddress
                                  (Symbolic
                                     QLabel
                                       { labelQualifier = [ "Fancy" , "Math" , "Fibonacci" ]
                                       , labelSection = Text
                                       , labelName = "fibonacci"
                                       , labelRelative = Nothing
                                       }))
                           )
                         , ( 14 , Unary Push (OperandAddress (Numeric Local 0)) )
                         , ( 15 , Nullary Read )
                         , ( 16 , Unary Push (OperandNumber 2) )
                         , ( 17 , Nullary Isub )
                         , ( 18
                           , Unary
                               Call
                               (OperandAddress
                                  (Symbolic
                                     QLabel
                                       { labelQualifier = [ "Fancy" , "Math" , "Fibonacci" ]
                                       , labelSection = Text
                                       , labelName = "fibonacci"
                                       , labelRelative = Nothing
                                       }))
                           )
                         , ( 19 , Nullary Iadd )
                         , ( 20 , Unary Push (OperandNumber 1) )
                         , ( 21 , Nullary Ret )
                         ]
                   , functionLabels = fromList [ ( "exit0" , 21 ) , ( "exit1" , 20 ) ]
                   , functionDeps =
                       fromList
                         [ QLabel
                             { labelQualifier = [ "Fancy" , "Math" , "Fibonacci" ]
                             , labelSection = Text
                             , labelName = "fibonacci"
                             , labelRelative = Nothing
                             }
                         ]
                   , functionUnresolved = fromList [ 5 , 8 , 13 , 18 ]
                   })
              (fromList
                 [ QLabel
                     { labelQualifier = [ "Fancy" , "Math" , "Fibonacci" ]
                     , labelSection = Text
                     , labelName = "fibonacci"
                     , labelRelative = Nothing
                     }
                 ])
          )
        ]
  }
*/
