[] = Array

ExportTable = [Label × Type]

# Type table will maintain mappings from
# function/global indices to their type signatures
TypeTable = [Type]

# GlobalBindsTable is a mapping from
# indices to variables and functions
GlobalBindsTable = [Bind]

Bind = Variable
     | Function

Variable = Label × Value

# The resolved label will containg symbolic
# info for debugging purposes only
Label
  = String            # unresolved
  | String × InstAddr # resolved

# Each value is typed explicitly
Value = Data × Idx Type

Function
  = Label     # function's label
  × [Label]   # labels local to that function
  × Body      # function's body
  × Ptr Scope # function's local scope (Parameters and local variables)
  × Idx Type  # function's type signature

FunDepsGraph = [FunDep]

FunDep = Idx Function × [Idx Function]

# The list of program's instructions
Body = [Instruction]

# Pointer is just an unsigned integral value of 64 bit
Ptr a = UInt64

# Function's scope is a list of bindings, that will be constituted
# of bound function's arguments and it's local variables
Scope = [Variable]

Idx a = Integer

Type
  = Functional FunctionalType
  | Constant ConstType

FunctionalType
  # list of input types that the function
  # is going to consume from the stack
  = [ConstType]
  # list of output types that are going
  # to be returned on the stack
  × [ConstType]

ConstantType = Unit | I64 | F64

Unit = Unit # unit is going to indicate the abscence of stack mutation
I64 = Int64
F64 = Double


--------------------------------------------------------------------------------
module Modula

export
  factorial : i64 -> i64
  fibonacci : i64 -> i64

import module.submod.dep1 as d1
  f
  g
  h

import dep2
  fun
  clown

section bss
  alloc_a8  arr1 23
  alloc_a16 arr2 25
  alloc_a32 arr3 10
  alloc_a64 arr3 10
  alloc_i64 x
  alloc_f64 pi

section data
  init_a8  str   0xab 0xbc 0xcd 0xff
  init_a16 words 0x1212 0x2323 0x3434
  init_i64 num   123498123498

section text
# parameters are introduced after the colon symbol
# as a tuple of pairs (type.name) followed by a tuple of types
# fun: (i64.num, i64.iter, i64.size, i64.buff) -> i64
factorial : n:i64 -> i64
{
  n              # n
  0:i64          # n 0
  cmp_i64        # (n `cmp` 0)
  jle exit1      #

  n              # n
  n              # n n
  dec_i64        # n (n-1)
  call factorial # n (fac (n-1))
  mul_i64        # n*(fac (n-1))
  ret

.exit1
  1:i64          # 1
  ret
}

fibonacci : n:i64 -> i64
{
  n                 # n
  0:i64             # n
  jz exit0          # n
  1:i64             # n 1
  cmp_i64           # n`cmp`1
  jeq exit1         #
  n                 # n
  dec_i64           # n-1
  call fibonacci    # f(n-1)
  n                 # f(n-1) n
  dec_i64           # f(n-1) (n-1)
  dec_i64           # f(n-1) (n-2)
  call fibonacci    # f(n-1) f(n-2)
  add_i64           # f(n-1) + f(n-2)

.exit1
  1:i64
.exit0
  ret
}

main: () -> i64
{
  14:i64
  28:i64
  call d1.f

  call dep1.f

  0:i64
  ret
}
