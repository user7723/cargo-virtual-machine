memory segment mnemonics
a 0 absolute address
t 1 text  - rel to text segment pointer
d 2 data  - rel to data segment pointer
b 3 bss   - rel to bss segment pointer
l 4 local - rel to frame pointer

these are part of an address canonical form
so it will be treated as an absolute address by the vm
11..
00..

000 - a
001 - t
010 - d
011 - b
100 - l
111 - a

before dereferencing a pointer you need to bring it to canonical
form by setting all high bits that aren't used in addressing to
the value of highest bit that IS used in addressing
addr <<= 16 toggle address bits to the highest bits of the ptr
addr >>= 16 shift filling all the bits by the value of the highest one

push 16        // 16
foreign malloc // addr

base_addr
offset
b_read | w_read | d_read | q_read

base_addr
offset
value
b_write | w_write | d_write | q_write

Practically, we don't need any special operations to work with locals.
The only one that is necessary is the operation to declare a local variable.
It will simply work as a directive to the VM that will tell it to move the
call-stack-pointer one point up, so then it might be safely accessed by
default read and write operations

declare n // call_sp++
