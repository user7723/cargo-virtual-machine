module Fancy.Math.Factorial

import Main
import Main
import Fancy.Math.Factorial
import Fancy.Math.Fibonacci

section bss

section data

section text

// memory segment mnemonics
// l - local - rel to frame pointer
// d - data  - rel to data segment pointer
// b - bss   - rel to bss segment pointer
// t - text  - rel to text segment pointer
// a - absolute - absolute

// n -> n
factorial
{
  decl n

  l:n
  read             // n
  0                // n 0
  icmp             // (n `cmp` 0)
  jle exit1        //

  l:n
  read             // n
  l:n
  read             // n n
  1                // n (n-1)
  isub
  call t:factorial // n (fac (n-1))
  imul             // n*(fac (n-1))
  ret

.exit1:
  1
  ret
}

youCantTouchThis
{
  nop
  nop
  nop
  5
  call t:factorial
  ret
}

/*

Module
  { moduleName = [ "Fancy" , "Math" , "Factorial" ]
  , entryPoint = Nothing
  , programGraph =
      fromList
        [ ( QLabel
              { labelQualifier = [ "Fancy" , "Math" , "Factorial" ]
              , labelSection = Text
              , labelName = "factorial"
              , labelRelative = Nothing
              }
          , Node
              (TextCode
                 FunctionDef
                   { functionName =
                       QLabel
                         { labelQualifier = [ "Fancy" , "Math" , "Factorial" ]
                         , labelSection = Text
                         , labelName = "factorial"
                         , labelRelative = Nothing
                         }
                   , functionScope = fromList [ ( "n" , 0 ) ]
                   , functionInsts =
                       fromList
                         [ ( 0 , Nullary Decl )
                         , ( 1 , Unary Push (OperandAddress (Numeric Local 0)) )
                         , ( 2 , Nullary Read )
                         , ( 3 , Unary Push (OperandNumber 0) )
                         , ( 4 , Nullary Icmp )
                         , ( 5
                           , Unary
                               Jle
                               (OperandAddress
                                  (Symbolic
                                     QLabel
                                       { labelQualifier = [ "Fancy" , "Math" , "Factorial" ]
                                       , labelSection = Text
                                       , labelName = "factorial"
                                       , labelRelative = Just "exit1"
                                       }))
                           )
                         , ( 6 , Unary Push (OperandAddress (Numeric Local 0)) )
                         , ( 7 , Nullary Read )
                         , ( 8 , Unary Push (OperandAddress (Numeric Local 0)) )
                         , ( 9 , Nullary Read )
                         , ( 10 , Unary Push (OperandNumber 1) )
                         , ( 11 , Nullary Isub )
                         , ( 12
                           , Unary
                               Call
                               (OperandAddress
                                  (Symbolic
                                     QLabel
                                       { labelQualifier = [ "Fancy" , "Math" , "Factorial" ]
                                       , labelSection = Text
                                       , labelName = "factorial"
                                       , labelRelative = Nothing
                                       }))
                           )
                         , ( 13 , Nullary Imul )
                         , ( 14 , Nullary Ret )
                         , ( 15 , Unary Push (OperandNumber 1) )
                         , ( 16 , Nullary Ret )
                         ]
                   , functionLabels = fromList [ ( "exit1" , 15 ) ]
                   , functionDeps =
                       fromList
                         [ QLabel
                             { labelQualifier = [ "Fancy" , "Math" , "Factorial" ]
                             , labelSection = Text
                             , labelName = "factorial"
                             , labelRelative = Nothing
                             }
                         ]
                   , functionUnresolved = fromList [ 5 , 12 ]
                   })
              (fromList
                 [ QLabel
                     { labelQualifier = [ "Fancy" , "Math" , "Factorial" ]
                     , labelSection = Text
                     , labelName = "factorial"
                     , labelRelative = Nothing
                     }
                 ])
          )
        ]
  }
*/
